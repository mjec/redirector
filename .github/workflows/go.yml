name: Go Test & Deploy

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      perform_deploy:
        description: "Deploy to production"
        required: true
        type: boolean
        default: false
        
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
    - name: Run tests
      run: go test -json -cover -cover -coverprofile ${{ github.workspace }}/coverage.out ${{ github.workspace }}/... | tee ${{ github.workspace }}/test.log.out
    - name: Summarize test results
      if: ${{ !cancelled() }}
      continue-on-error: true
      run: |
        >> $GITHUB_STEP_SUMMARY echo "### Test results"
        >> $GITHUB_STEP_SUMMARY echo ""
        >> $GITHUB_STEP_SUMMARY echo '```'
        >> $GITHUB_STEP_SUMMARY jq -j 'reduce inputs as $item (null; . += [$item]) | map(select(.Test == null and .Action == "output")) | group_by(.Package) | map(reduce .[] as $i (""; . = $i.Output)) | join("")' ${{ github.workspace }}/test.log.out
        >> $GITHUB_STEP_SUMMARY echo '```'
        >> $GITHUB_STEP_SUMMARY echo ""
    - name: Summarize coverage
      if: ${{ !cancelled() }}
      continue-on-error: true
      run: |
        >> $GITHUB_STEP_SUMMARY echo "### Test coverage"
        >> $GITHUB_STEP_SUMMARY echo ""
        >> $GITHUB_STEP_SUMMARY echo '```'
        >> $GITHUB_STEP_SUMMARY go tool cover -func=${{ github.workspace }}/coverage.out
        >> $GITHUB_STEP_SUMMARY echo '```'

  decision:
    name: Decide whether to deploy
    runs-on: ubuntu-latest
    needs:
      - test
    outputs:
      deploy: ${{ steps.decide.outputs.deploy }}
    steps:
      - id: decide
        name: Decide
        env:
          TEST_RESULT: ${{ needs.test.result }}
          WAS_PUSH_TO_MAIN: ${{ github.event_name == 'push' && github.ref_name == 'main' && github.ref_type == 'branch' }}
          WAS_DEPLOY_REQUESTED: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.perform_deploy }}
          
        run: |
          >> $GITHUB_STEP_SUMMARY cat << "EOF"

          ### Trigger
          Event: `${{ github.event_name }}`
          Ref:   `${{ github.ref}}`

          ### Environment

          ```
          TEST_RESULT=\"$TEST_RESULT\" 
          WAS_PUSH_TO_MAIN=\"$WAS_PUSH_TO_MAIN\"
          WAS_DEPLOY_REQUESTED=\"$WAS_DEPLOY_REQUESTED\"
          EOF

          if git log -1 --format="%B" "$GITHUB_SHA" | grep -F NODEPLOY; then
            NODEPLOY_IN_COMMIT_MESSAGE=true
          else
            NODEPLOY_IN_COMMIT_MESSAGE=false
          fi

          >> $GITHUB_STEP_SUMMARY echo NODEPLOY_IN_COMMIT_MESSAGE=\"$NODEPLOY_IN_COMMIT_MESSAGE\"
          >> $GITHUB_STEP_SUMMARY echo '```'
          >> $GITHUB_STEP_SUMMARY echo ""          

          if ! [ "$TEST_RESULT" = "success" ]; then
            >> $GITHUB_STEP_SUMMARY echo "Tests failed."
            >> $GITHUB_STEP_SUMMARY echo "Not deploying."
            >> $GITHUB_OUTPUT echo "deploy=false"
            exit 0
          else
            >> $GITHUB_STEP_SUMMARY echo "Tests passed."
          fi

          if [ "$WAS_PUSH_TO_MAIN" = "true" ] ; then
            >> $GITHUB_STEP_SUMMARY echo "Triggered by push to main."
            if [ "$NODEPLOY_IN_COMMIT_MESSAGE" = "true" ]; then
              >> $GITHUB_STEP_SUMMARY echo "Latest commit ($GITHUB_SHA) message contains NODEPLOY."
              >> $GITHUB_STEP_SUMMARY echo "Not deploying."
              >> $GITHUB_OUTPUT echo "deploy=false"
            else
              >> $GITHUB_STEP_SUMMARY echo "Deploying to production."
              >> $GITHUB_OUTPUT echo "deploy=true"
            fi
              exit 0
          fi
          
          if [ "$WAS_DEPLOY_REQUESTED" = "true" ]; then
            >> $GITHUB_STEP_SUMMARY echo "Triggered by manual request."
            >> $GITHUB_STEP_SUMMARY echo "Deployment to production was requested."
            >> $GITHUB_STEP_SUMMARY echo "Deploying to production."
            >> $GITHUB_OUTPUT echo "deploy=true"
            exit 0
          fi

          >> $GITHUB_STEP_SUMMARY echo "Not deploying."
          >> $GITHUB_OUTPUT echo "deploy=false"

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs:
      - decision
    if: ${{ needs.decision.deploy == 'true' }}
    environment: production
    concurrency:
      group: deploy-${{ vars.ENVIRONMENT_NAME }}
      cancel-in-progress: true
    steps:
    - name: Set up flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
      with:
        version: '0.2.18'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: app
    - name: Checkout configuration
      uses: actions/checkout@v4
      with:
        repository: 'mjec/redirector-configuration'
        path: config
        ref: ${{ vars.ENVIRONMENT_NAME }}
        sparse-checkout: |
          config.json
          fly.toml
        sparse-checkout-cone-mode: false
        token: ${{ secrets.CONFIG_CHECKOUT_TOKEN }}
    - name: Deploy
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      working-directory: app
      run: |
        mv ../config/config.json ./config.json
        mv ../config/fly.toml ./fly.toml
        flyctl deploy --remote-only
